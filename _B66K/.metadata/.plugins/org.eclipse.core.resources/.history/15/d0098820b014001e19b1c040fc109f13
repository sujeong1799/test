package com.b66k.www.config;

import javax.servlet.Filter;
import javax.servlet.MultipartConfigElement;
import javax.servlet.ServletRegistration.Dynamic;

import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		return new Class[] {RootConfig.class};
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class[] {ServletConfiguration.class};
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] {"/"};
	}

	@Override
	protected Filter[] getServletFilters() {
		// encoding filter 설정
		// encodingFilter의 객체를 만들어줘
		CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();
		// 들어오는 인코딩 설정 
		encodingFilter.setEncoding("UTF-8");
		// 외부로 나가는 값도 인코딩 설정 해주는 옵션
		encodingFilter.setForceEncoding(true);
		return new Filter[] {encodingFilter};
	}

	@Override
	protected void customizeRegistration(Dynamic registration) {
		// 커스터마이징 할 때 레지스터 => 파일첨부 업로드 설정할 때 사용
		// throwExceptionIfNotHandlerFound : 존재하지 않는 API 요청의 응답 커스터마이징
		registration.setInitParameter("throwExceptionIfNotHandlerFound", "true");
		
		// 파일 첨부
		String uploadLocation = "D:\\_myweb\\_java\\fileUpload";
		int maxFileSize = 1024*1024*20; // 20mb
		int maxReqSize =maxFileSize * 5; // 파일 요청 최대 크기 20mb * 5
		int fileSizeThreshold = maxFileSize; // 파일전송시 만들어지는 임시공간
		MultipartConfigElement multipartConfigElement =
				new MultipartConfigElement(uploadLocation, maxFileSize,
						maxReqSize, fileSizeThreshold);
		registration.setMultipartConfig(multipartConfigElement);
		
	}
	


}

